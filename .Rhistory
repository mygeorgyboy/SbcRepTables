background_color <- "transparent"
text_color <- "#333"
}
if(row_name %in% noFormatRows){
background_color <- "transparent"
}
td <-
paste(
"<td  ",class_text," style='background: ",
background_color,
";color:",text_color,";'>",
round(value, 2),
"</td>",
sep = ""
)
}
}else{
if(is.na(value)){
value = ''
}
td <- paste("<td ",class_text,">", value, "</td>", sep = "")
}
tr <-  paste(tr, td)
}
tdata <- paste(tdata, tag("tr", tr))
}
}
#agregar grupos
if(has_groups){
gline <- "<tr><td></td>" # La prmera columna libre
#gline <- paste(gline, "<td class='group_header' colspan='", group_widths[1]-1 ,"' >",group_names[1],"</td>",sep = "")
for(m in seq_along(group_widths)){
gline <- paste(gline, "<td class='group_header' colspan='", group_widths[m]-1 ,"' >",group_names[m],"</td>",sep = "")
}
gline <- paste(gline, "</tr>",sep = "")
tdata <- paste(gline,tdata)
}
#agregar titulos
hline <- ""
hnames <- names(datos[[1]])
hnames[1] <- ""
for(i in seq_along(hnames)){
col_name <- hnames[i]
if(i==1){
hline <- paste(hline,"<th></th>")
}else{
hline <- paste(hline,"<th class='rotate'><div><span>",col_name,"</span></div></th>")
}
}
hline <-  tag("tr", hline)
tdata <- paste(hline,tdata)
tdata <- paste("<table class='table-style'>",tdata,"</table>")
tdata <- paste("<div class='table-container'>",tdata,"</div>")
if(includeCopy){
tdata <- paste("<button onclick=\"copyToClip(document.getElementById('all-page').innerHTML)\">Copiar al porta papeles</button>",tdata)
}
html_data <- tag("body",tdata)
html_data <- paste("<head> <meta charset='UTF-8'><style>",hm_style,"</style><script>",hm_script, "</script></head>",html_data)
html_data <- paste("<html id='all-page'>",html_data,"</html>")
return (html_data)
}
sbc_viewer  <- function(html_data){
tempDir <- tempfile()
dir.create(tempDir)
htmlFile <- file.path(tempDir, "index.html")
writeLines(html_data, htmlFile)
viewer <- getOption("viewer")
viewer(htmlFile)
}
library(SbcRepTables)
library(SbcRepTables)
?chart_colors
?chart_colors
library(SbcRepTables)
?sbc_add_col_sum
data.frame(rname = c("row1","row2"),a = 1:2, b = 3,4)
data.frame(rname = c("row1","row2"),a = 1:2, b = 3:4)
data.frame(rname = c("row1","row2"),a = 1:2, b = 3:4) %>% sbc_add_col_sum()
library(dplyr)
data.frame(rname = c("row1","row2"),a = 1:2, b = 3:4) %>% sbc_add_col_sum()
library(tidyverse)
data.frame(rname = c("row1","row2"),a = 1:2, b = 3:4) %>% sbc_add_col_sum()
data.frame(rname = c("row1","row2"),a = 1:2, b = 3:4) %>% sbc_add_col_sum(sumLabel = "Total")
library(SbcRepTables)
?sbc_add_col_sum
data.frame(rname = c("row1","row2"),a = 1:2, b = 3:4 ,c = c("x","y")) %>% sbc_add_col_sum(sumLabel = "Total")
library(SbcRepTables)
library(tidyverse)
data.frame(rname = c("row1","row2"),a = 1:2, b = 3:4 ,c = c("x","y")) %>% sbc_add_col_sum(sumLabel = "Total")
source('~/Documents/EstudiosR/proyectos/SbcRepTables/R/sbc_functions.R')
data.frame(rname = c("row1","row2"),a = 1:2, b = 3:4 ,c = c("x","y")) %>% sbc_add_col_sum(sumLabel = "Total")
library(tidyverse)
data.frame(rname = c("row1","row2"),a = 1:2, b = 3:4 ,c = c("x","y")) %>% sbc_add_col_sum(sumLabel = "Total")
data.frame(rname = c("row1","row2"),a = 1:2, b = 3:4 ,c = c("x","y")) %>% sbc_add_col_sum(sumLabel = "")
data.frame(rname = c("row1","row2"),a = 1:2, b = 3:4 ,c = c("x","y")) %>% sbc_add_col_sum()
data.frame(rname = c("row1","row2"),a = 1:2, b = 3:4 ) %>% sbc_add_col_sum()
data.frame(rname = c("row1","row2"),a = 1:2, b = 3:4 ,c = c("m","n")) %>% sbc_add_col_sum()
data.frame(rname = c("row1","row2"),a = 1:2, b = 3:4 ,c = c("m","n")) %>% sbc_add_col_sum()
data.frame(rname = c("row1","row2"),a = 1:2, b = 3:4 ,c = c("x","y")) %>% sbc_add_col_sum(sumLabel = "Total"
library(SbcRepTables)
?sbc_add_col_sum
?sbc_add_col_sum
library(SbcRepTables)
example("sbc_add_col_sum")
help("sbc_add_col_sum")
help("sbc_add_col_sum")
help("sbc_add_col_sum")
?
-
.
?.
library(SbcRepTables)
?.
.(a, b, c)
library(plyr)
.(a, b, c)
.(first = a, second = b, third = c)
ddply(mtcars, "cyl", each(nrow, ncol))
.(a ^ 2, b - d, log(c))
as.quoted(~ a + b + c)
library(SbcRepTables)
?.
?sbc_add_col_sum
library(SbcRepTables)
?sbc_add_col_sum
?sbc_add_col_sum
library(SbcRepTables)
example(sbc_add_col_sum)
examples(sbc_add_col_sum)
example(sbc_add_col_sum)
library(tidyverse)
example(sbc_add_col_sum)
devtools::use_testthat()
usethis::use_testthat()
library(testthat)
expect_equal(10, 10 + 1e-7)
expect_equal(10, 11)
string <- "Testing is fun!"
expect_match(string, "Testing")
expect_match(string, "Testing1")
expect_match(string, "Testing1")
expect_match(string, "Testing")
search()
file.exists("~/.ssh/id_rsa.pub")
devtools::install_github("mygeorgyboy/SbcRepTables")
install.packages("devtools")
install.packages("devtools")
git
library(SbcRepTables)
library(SbcRepTables)
library(SbcRepTables)
version
library(SbcRepTables)
library(SbcRepTables)
library(SbcRepTables)
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
?SbcRepTables
help(SbcRepTables)
?sbc_multi_column_to_df
class(cars)
?sbc_multi_column_to_df
library(SbcRepTables)
library(SbcRepTables)
?sbc_multi_column_to_df
library(SbcRepTables)
library(SbcRepTables)
?sbc_multi_column_to_df
?sbc_multi_column_to_df
?sbc_multi_column_to_df
?sbc_multi_column_to_df
?sbc_multi_column_to_df
library(SbcRepTables)
library(SbcRepTables)
package?SbcRepTables
package?SbcRepTables
package?SbcRepTables
library(SbcRepTables)
library(SbcRepTables)
library(SbcRepTables)
library(SbcRepTables)
package?SbcRepTables
?diamonds
library(SbcRepTables)
library(SbcRepTables)
library(SbcRepTables)
SbcRepTables::ta
library(SbcRepTables)
library(SbcRepTables)
library(SbcRepTables)
SbcR+
""
library(SbcRepTables)
library(SbcRepTables)
library(SbcRepTables)
source('~/Documents/EstudiosR/proyectos/SbcRepTables/R/sbc_functions.R')
library(SbcRepTables)
?chartr
library(SbcRepTables)
#' Compare one column on different data frames
#'
#' Used to compare several years of a variable
#'
#' @param x A list contaning the dataframes, names are used as name columns.
#' @param var_name variable to be compared
#'
sbc_compare_df_var <- function(x,var_name, transpos_ind =F, incidence_var = NULL){
if(is.null(names(x))){
names(x) <- as.character(seq_along(x))
}
var_table <- NULL
for(i in seq_along(x)){
tmp_ds <- count_( x[[i]],var_name)
tmp_ds <- tmp_ds %>% mutate(perc = n / sum(w$n) *100) %>% arrange(desc(perc))
if(!showCount){
tmp_ds <- tmp_ds[,c(1,3)]
}
tmp_ds$ds_name <- names(x)[i]
if(is.null(var_table)){
var_table <- tmp_ds
}else{
var_table <- bind_rows(var_table,tmp_ds)
}
}
if(transpos_ind){
out_ds <- var_table %>% spread(var_name, perc)
}else{
out_ds <- var_table %>% spread(ds_name, perc)
}
return(out_ds)
}
#' Compare one column on different data frames
#'
#' Used to compare several years of a variable
#'
#' @param x A list contaning the dataframes, names are used as name columns.
#' @param var_name variable to be compared
#'
sbc_compare_df_var <- function(x,var_name, transpos_ind =F, incidence_var = NULL, showCount = F){
if(is.null(names(x))){
names(x) <- as.character(seq_along(x))
}
var_table <- NULL
for(i in seq_along(x)){
tmp_ds <- count_( x[[i]],var_name)
tmp_ds <- tmp_ds %>% mutate(perc = n / sum(w$n) *100) %>% arrange(desc(perc))
if(!showCount){
tmp_ds <- tmp_ds[,c(1,3)]
}
tmp_ds$ds_name <- names(x)[i]
if(is.null(var_table)){
var_table <- tmp_ds
}else{
var_table <- bind_rows(var_table,tmp_ds)
}
}
if(transpos_ind){
out_ds <- var_table %>% spread(var_name, perc)
}else{
out_ds <- var_table %>% spread(ds_name, perc)
}
return(out_ds)
}
library(SbcRepTables)
#' Compare one column on different data frames
#'
#' Used to compare several years of a variable
#'
#' @param x A list contaning the dataframes, names are used as name columns.
#' @param var_name variable to be compared
#' @param incidence_var if not null is used to calculate incedence (divide by length(unique(incidence_var)))
#'
sbc_compare_df_var <- function(x,var_name, transpos_ind =F, incidence_var = NULL, showCount = F){
if(is.null(names(x))){
names(x) <- as.character(seq_along(x))
}
var_table <- NULL
for(i in seq_along(x)){
tmp_ds <- count_( x[[i]],var_name)
divide_by <-sum(tmp_ds$n)
if(!is.null(incidence_var)){
divide_by <- x[[i]][[incidence_var]] %>% unique() %>% length()
}
tmp_ds <- tmp_ds %>% mutate(perc = n /  divide_by*100) %>% arrange(desc(perc))
if(!showCount){
tmp_ds <- tmp_ds[,c(1,3)]
}
tmp_ds$ds_name <- names(x)[i]
if(is.null(var_table)){
var_table <- tmp_ds
}else{
var_table <- bind_rows(var_table,tmp_ds)
}
}
if(transpos_ind){
out_ds <- var_table %>% spread(var_name, perc)
}else{
out_ds <- var_table %>% spread(ds_name, perc)
}
return(out_ds)
}
#' Compare one column on different data frames
#'
#' Used to compare several years of a variable
#'
#' @param x A list contaning the dataframes, names are used as name columns.
#' @param var_name variable to be compared
#' @param incidence_var if not null is used to calculate incedence (divide by length(unique(incidence_var)))
#'
sbc_compare_df_var_perc <- function(x,var_name, transpos_ind =F, incidence_var = NULL, showCount = F){
if(is.null(names(x))){
names(x) <- as.character(seq_along(x))
}
var_table <- NULL
for(i in seq_along(x)){
tmp_ds <- count_( x[[i]],var_name)
divide_by <-sum(tmp_ds$n)
if(!is.null(incidence_var)){
divide_by <- x[[i]][[incidence_var]] %>% unique() %>% length()
}
tmp_ds <- tmp_ds %>% mutate(perc = n /  divide_by*100) %>% arrange(desc(perc))
if(!showCount){
tmp_ds <- tmp_ds[,c(1,3)]
}
tmp_ds$ds_name <- names(x)[i]
if(is.null(var_table)){
var_table <- tmp_ds
}else{
var_table <- bind_rows(var_table,tmp_ds)
}
}
if(transpos_ind){
out_ds <- var_table %>% spread(var_name, perc)
}else{
out_ds <- var_table %>% spread(ds_name, perc)
}
return(out_ds)
}
library(SbcRepTables)
library(SbcRepTables)
library(SbcRepTables)
library(SbcRepTables)
library(SbcRepTables)
library(SbcRepTables)
library(SbcRepTables)
w <-sbc_table_2_var_perc(in_df,col_name,colVar,MARGIN = MARGIN, na.rm = na.rm,  incidenceVariable =  incidenceVariable)
library(SbcRepTables)
library(SbcRepTables)
library(SbcRepTables)
library(SbcRepTables)
library(SbcRepTables)
library(SbcRepTables)
library(SbcRepTables)
library(SbcRepTables)
library(SbcRepTables)
library(SbcRepTables)
library(SbcRepTables)
library(SbcRepTables)
library(SbcRepTables)
library(SbcRepTables)
library(SbcRepTables)
library(SbcRepTables)
library(SbcRepTables)
library(SbcRepTables)
library(SbcRepTables)
library(SbcRepTables)
library(SbcRepTables)
library(SbcRepTables)
library(SbcRepTables)
library(SbcRepTables)
library(SbcRepTables)
library(SbcRepTables)
library(SbcRepTables)
library(SbcRepTables)
library(SbcRepTables)
library(SbcRepTables)
library(SbcRepTables)
library(SbcRepTables)
library(SbcRepTables)
library(SbcRepTables)
library(SbcRepTables)
library(SbcRepTables)
library(SbcRepTables)
library(SbcRepTables)
library(SbcRepTables)
library(SbcRepTables)
library(SbcRepTables)
library(SbcRepTables)
library(SbcRepTables)
install.packages(c("data.tree", "kableExtra", "openxlsx", "plotly"))
install.packages("roxygen2")
library(SbcRepTables)
install.packages("devtools")
library(devtools)
install_github("mygeorgyboy/SbcRepTables")
library(SbcRepTables)
usethis::use_pkgdown()
pkgdown::build_site()
install.packages("kableExtra")
install.packages("plotly")
install.packages("data.tree")
library(SbcRepTables)
library(SbcRepTables)
library(SbcRepTables)
library(SbcRepTables)
library(SbcRepTables)
library(SbcRepTables)
library(SbcRepTables)
library(SbcRepTables)
library(SbcRepTables)
library(SbcRepTables)
library(SbcRepTables)
library(SbcRepTables)
library(SbcRepTables)
library(SbcRepTables)
library(SbcRepTables)
library(SbcRepTables)
library(SbcRepTables)
library(SbcRepTables)
library(SbcRepTables)
library(SbcRepTables)
library(SbcRepTables)
source('~/Documents/EstudiosR/proyectos/SbcRepTables/R/sbc_html_heatmap_v3.R')
library(SbcRepTables)
library(SbcRepTables)
library(SbcRepTables)
install.packages("roxygen2")
install.packages("data.tree")
library(SbcRepTables)
library(SbcRepTables)
library(SbcRepTables)
library(SbcRepTables)
install.packages("roxygen2")
library(SbcRepTables)
install.packages("testthat")
library(SbcRepTables)
library(SbcRepTables)
library(SbcRepTables)
#' Return Cramer V values
#'#'
#' @param  x Data from column 1
#' @param  x Data from column 2
#'
sbc_cramer_v <-  function(x,y) {
CV = sqrt(chisq.test(x, y, correct=FALSE)$statistic /
(length(x) * (min(length(unique(x)),length(unique(y))) - 1)))
return(as.numeric(CV))
}
library(SbcRepTables)
library(SbcRepTables)
library(SbcRepTables)
library(SbcRepTables)
library(SbcRepTables)
library(SbcRepTables)
install.packages("kableExtra")
install.packages("data.tree")
library(SbcRepTables)
source("~/Documents/EstudiosR/proyectos/SbcRepTables/R/sbc_report_list_v2.R", echo=TRUE)
source("~/Documents/EstudiosR/proyectos/SbcRepTables/R/sbc_report_list_v2.R", echo=TRUE)
library(SbcRepTables)
source("~/Documents/EstudiosR/proyectos/SbcRepTables/R/sbc_html_heatmap_v2.R")
source("~/Documents/EstudiosR/proyectos/SbcRepTables/R/sbc_functions.R")
source("~/Documents/EstudiosR/proyectos/SbcRepTables/R/sbc_html_heatmap_v3.R")
source("~/Documents/EstudiosR/proyectos/SbcRepTables/R/sbc_report_list_v2.R")
source("~/Documents/EstudiosR/proyectos/SbcRepTables/R/sbc_report_list.R")
library(SbcRepTables)
library(SbcRepTables)
library(SbcRepTables)
sbc_kable
# Esta función es un wraper de knitr::kable
# Agrega la siguente funcionalidad:
# 1) Los números los muestra con separador de miles
# 2) Agrega estilo (Bold) al ultimo renglon si el parametro hasColTotals = TRUE (para mostrar totales)
sbc_kable <- function(x,..., hasColTotals = FALSE,hasRowTotals = FALSE,format.args = NULL,digits = 2) {
tab <- knitr::kable(x,..., format.args = list(decimal.mark = '.', big.mark = ","),digits = digits )
if(!"list" %in% class(x)){
if(hasColTotals){
tab <-tab %>% row_spec(nrow(x), bold = T)
}
if(hasRowTotals){
tab <-tab %>% column_spec(ncol(x), bold = T)
}
return(tab)
}else{
# Se trata de una lista de dataframes, generar el cuadro
w <- x[[1]]
for(j in 2:length(x)){
w <- bind_rows(w,x[[j]])
}
names(w)[1] <- "."
tab <- knitr::kable(w,..., format.args = list(decimal.mark = '.', big.mark = ","),digits = digits )
indices <- map_dbl(x, nrow)
tab <- tab %>% group_rows(index = indices) %>% scroll_box(width = "100%")
return(tab)
}
}
sbc_kable
library(SbcRepTables)
sbc_kable
library(SbcRepTables)
sbc_kable()
sbc_kable
library(SbcRepTables)
library(SbcRepTables)
install.packages("devtools")
library(devtools)
install_github("mygeorgyboy/SbcRepTables")
* There are several teams in Marketing Research Projects
library(SbcRepTables)
